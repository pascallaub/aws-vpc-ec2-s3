AWSTemplateFormatVersion: 2010-09-09
Description: AWS Webanwendungsarchitektur mit VPC, ELB, Auto Scaling und S3

Resources: 
  vpc1339autoscaling:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  publicsub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      VpcId: !Ref vpc1339autoscaling
      CidrBlock: 10.0.1.0/24
  publicsub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      VpcId: !Ref vpc1339autoscaling
      CidrBlock: 10.0.2.0/24
  privatesub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      VpcId: !Ref vpc1339autoscaling
      CidrBlock: 10.0.3.0/24
  privatesub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      VpcId: !Ref vpc1339autoscaling
      CidrBlock: 10.0.4.0/24
  igw1339:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc1339autoscaling
      InternetGatewayId: !Ref igw1339
  publicroutetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc1339autoscaling
  publicroute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicroutetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igw1339
  myelasticip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  mynatgateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myelasticip.AllocationId
      SubnetId: !Ref publicsub1
  privateroutetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc1339autoscaling
  privatroute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateroutetable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref mynatgateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesub1
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicroutetable
      SubnetId: !Ref publicsub1
  secloadbalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: loadbalancer
      GroupDescription: Port 80 Load Balancer
      VpcId: !Ref vpc1339autoscaling
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  secec2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: secec2
      GroupDescription: HTTP/SSH open
      VpcId: !Ref vpc1339autoscaling
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref secloadbalancer
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  ec2autoscaling1339:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0084a47cc718c111a
      InstanceType: t2.micro
      SubnetId: !Ref privatesub1
      SecurityGroupIds:
        - !Ref secec2
      UserData: !Base64 |
        #!/bin/bash 
        apt update -y
        apt install -y nginx
        systemctl start nginx
  ec2autoscaling21339:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0084a47cc718c111a
      InstanceType: t2.micro
      SubnetId: !Ref privatesub2
      SecurityGroupIds:
        - !Ref secec2
      UserData: !Base64 |
        #!/bin/bash
        apt update -y
        apt install -y nginx
        systemctl start nginx
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateName: "mylaunchtemplate"
        Version: "1"
      MaxSize: "4"
      MinSize: "2"
      VPCZoneIdentifier:
        - !Ref privatesub1
        - !Ref privatesub2
      TargetGroupARNs:
        - !Ref MyTargetGroup
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "my-load-balancer"
      Subnets:
        - !Ref publicsub1
        - !Ref publicsub2
      SecurityGroups:
        - !Ref secloadbalancer
      Scheme: "internet-facing"
      Type: application
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "my-target-group"
      Port: 80
      Protocol: "HTTP"
      VpcId: !Ref vpc1339autoscaling
      HealthCheckProtocol: HTTP
      HealthCheckPort: "80"
      HealthCheckPath: "/"
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: "HTTP"
  s3autoscaling1339:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: alfi1339pietro
    DeletionPolicy: Delete
  MyBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3PutBucketPolicy
      Roles:
        - !Ref MyRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "s3:PutBucketPolicy"
            Resource: "arn:aws:s3:::alfi1339pietro"
  MyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "ec2.amazonaws.com"
  

    